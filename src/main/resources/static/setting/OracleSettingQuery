-- 전체 잡고 실행하면 됩니다.
-- 혹시 트리거 작동 안될시에는 첫번째 커밋 부분까지 잡아서 실행 후
-- 트리거 실행후 두번째 커밋 영역 잡고 실행하면 됩니다.
--시퀀스는 테이블명_SEQ
--제약조건 이름 : TABLE NAME
--- PK : 테이블명
--- FK : 원본테이블_참조하는테이블
SET DEFINE OFF;
--------DROP-------------
DROP TABLE MEM CASCADE CONSTRAINTS;
DROP TABLE BIZ CASCADE CONSTRAINTS;
DROP TABLE GRADE CASCADE CONSTRAINTS;
DROP TABLE CONTEST CASCADE CONSTRAINTS;
DROP TABLE NOTICE CASCADE CONSTRAINTS;
DROP TABLE MY_SCRAP CASCADE CONSTRAINTS;
DROP TABLE EDIT CASCADE CONSTRAINTS;
DROP TABLE EDIT_REPLY CASCADE CONSTRAINTS;
DROP TABLE FAQ CASCADE CONSTRAINTS;
DROP TABLE Q CASCADE CONSTRAINTS;
DROP TABLE DOWN CASCADE CONSTRAINTS;
DROP TABLE UP CASCADE CONSTRAINTS;
DROP TABLE REPLY CASCADE CONSTRAINTS;
DROP TABLE REPLY_EDIT CASCADE CONSTRAINTS;
DROP TABLE REPLY_UP CASCADE CONSTRAINTS;
DROP TABLE REPLY_DOWN CASCADE CONSTRAINTS;
DROP TABLE CA CASCADE CONSTRAINTS;
DROP TABLE SUB_CA CASCADE CONSTRAINTS;
DROP TABLE BOOK_CA CASCADE CONSTRAINTS;
DROP TABLE BOOK_SCRAP CASCADE CONSTRAINTS;
DROP TABLE BOOK_SCRAP_UP CASCADE CONSTRAINTS;
DROP TABLE BOOK_MYSCRAP CASCADE CONSTRAINTS;
DROP TABLE RPT CASCADE CONSTRAINTS;
DROP TABLE NEW_RPT CASCADE CONSTRAINTS;
DROP TABLE NEW CASCADE CONSTRAINTS;
DROP TABLE NEW_UP CASCADE CONSTRAINTS;
DROP TABLE NEW_DOWN CASCADE CONSTRAINTS;
DROP TABLE NEW_REPLY CASCADE CONSTRAINTS;
DROP TABLE NEW_REPLY_UP CASCADE CONSTRAINTS;
DROP TABLE NEW_REPLY_DOWN CASCADE CONSTRAINTS;
DROP TABLE REPLY_EDIT CASCADE CONSTRAINTS;
DROP TABLE SURVEY_Q CASCADE CONSTRAINTS;
DROP TABLE SURVEY_R CASCADE CONSTRAINTS;
DROP TABLE NEW_REPLY_EDIT CASCADE CONSTRAINTS;

---------시퀀스----------
--등급(GRADE_NO)
DROP SEQUENCE GRADE_SEQ;
-- 일반회원(MEM_NO)
DROP SEQUENCE MEM_SEQ;
-- FAQ
DROP SEQUENCE FAQ_SEQ;
--NOTICE
DROP SEQUENCE NOTICE_SEQ;
-- 에디터 게시물
DROP SEQUENCE EDIT_SEQ;
-- 에디터 댓글
DROP SEQUENCE EDIT_REPLY_SEQ;
-- 사업자 회원
DROP SEQUENCE BIZ_SEQ;
--공모전
DROP SEQUENCE CONTEST_SEQ;
--책분류
DROP SEQUENCE BOOK_CA_SEQ;
--책스크랩
DROP SEQUENCE BOOK_SCRAP_SEQ;
--책스크랩 신청 누른 정보
DROP SEQUENCE BOOK_SCRAP_UP_SEQ;
--마이스크랩
DROP SEQUENCE MY_SCRAP_SEQ;
--새터댓글추천
DROP SEQUENCE NEW_REPLY_UP_SEQ;
--새터댓글신고
DROP SEQUENCE NEW_REPLY_DOWN_SEQ;
--새터신고내용
DROP SEQUENCE NEW_RPT_SEQ;
--새터댓글
DROP SEQUENCE NEW_REPLY_SEQ;
--새터
DROP SEQUENCE NEW_SEQ;
-- 카테고리
DROP SEQUENCE CA_SEQ;
-- 소분류통합
DROP SEQUENCE SUB_CA_SEQ;
-- 게시물
DROP SEQUENCE Q_SEQ;
-- 댓글
DROP SEQUENCE REPLY_SEQ;
-- 에디터 댓글
DROP SEQUENCE REPLY_EDIT_SEQ;
-- 댓글 추천
DROP SEQUENCE REPLY_UP_SEQ;
-- 댓글신고
DROP SEQUENCE REPLY_DOWN_SEQ;
-- 신고내용
DROP SEQUENCE RPT_SEQ;
-- 게시글신고
DROP SEQUENCE DOWN_SEQ;
-- 게시글추천
DROP SEQUENCE UP_SEQ;
-- 새터추천
DROP SEQUENCE NEW_UP_SEQ;
-- 새터신고
DROP SEQUENCE NEW_DOWN_SEQ;
-- FAQ
DROP SEQUENCE FAQ_SEQ;
-- SURVEY_Q
DROP SEQUENCE SURVEY_Q_SEQ;
-- SURVEY_R
DROP SEQUENCE SURVEY_R_SEQ;
-- 새터 에디터 댓글
DROP SEQUENCE NEW_REPLY_EDIT_SEQ;
---------시퀀스----------
--등급(GRADE_NO)
CREATE SEQUENCE GRADE_SEQ
START WITH 0
MINVALUE 0;
-- 일반회원(MEM_NO)
CREATE SEQUENCE MEM_SEQ;
-- FAQ
CREATE SEQUENCE FAQ_SEQ
START WITH 0
MINVALUE 0;
-- NOTICE
CREATE SEQUENCE NOTICE_SEQ
START WITH 0
MINVALUE 0;
-- 에디터 게시물
CREATE SEQUENCE EDIT_SEQ
START WITH 0
MINVALUE 0;
-- 에디터 댓글
CREATE SEQUENCE EDIT_REPLY_SEQ
START WITH 0
MINVALUE 0;
-- 사업자 회원
CREATE SEQUENCE BIZ_SEQ
START WITH 0
MINVALUE 0;
--공모전
CREATE SEQUENCE CONTEST_SEQ
START WITH 0
MINVALUE 0;
--책분류
CREATE SEQUENCE BOOK_CA_SEQ
START WITH 0
MINVALUE 0;
--책스크랩
CREATE SEQUENCE BOOK_SCRAP_SEQ
START WITH 0
MINVALUE 0;
--책스크랩 신청 누른 정보
CREATE SEQUENCE BOOK_SCRAP_UP_SEQ
START WITH 0
MINVALUE 0;
--마이스크랩
CREATE SEQUENCE MY_SCRAP_SEQ
START WITH 0
MINVALUE 0;
--새터댓글추천
CREATE SEQUENCE NEW_REPLY_UP_SEQ
START WITH 0
MINVALUE 0;
--새터댓글신고
CREATE SEQUENCE NEW_REPLY_DOWN_SEQ
START WITH 0
MINVALUE 0;
--새터신고내용
CREATE SEQUENCE NEW_RPT_SEQ
START WITH 0
MINVALUE 0;
--새터댓글
CREATE SEQUENCE NEW_REPLY_SEQ
START WITH 0
MINVALUE 0;
--새터
CREATE SEQUENCE NEW_SEQ
START WITH 0
MINVALUE 0;
-- 카테고리
CREATE SEQUENCE CA_SEQ
START WITH 0
MINVALUE 0;
-- 소분류통합
CREATE SEQUENCE SUB_CA_SEQ
START WITH 0
MINVALUE 0;
-- 게시물
CREATE SEQUENCE Q_SEQ
START WITH 50
MINVALUE 0;
-- 댓글
CREATE SEQUENCE REPLY_SEQ
START WITH 0
MINVALUE 0;
-- 에디터 댓글( 편집 )
CREATE SEQUENCE REPLY_EDIT_SEQ
START WITH 0
MINVALUE 0;
-- 댓글 추천
CREATE SEQUENCE REPLY_UP_SEQ
START WITH 0
MINVALUE 0;
-- 댓글신고
CREATE SEQUENCE REPLY_DOWN_SEQ
START WITH 0
MINVALUE 0;
-- 신고내용
CREATE SEQUENCE RPT_SEQ
START WITH 0
MINVALUE 0;
-- 게시글신고
CREATE SEQUENCE DOWN_SEQ
START WITH 0
MINVALUE 0;
-- 게시글추천
CREATE SEQUENCE UP_SEQ
START WITH 0
MINVALUE 0;
-- 새터추천
CREATE SEQUENCE NEW_UP_SEQ
START WITH 0
MINVALUE 0;
-- 새터신고
CREATE SEQUENCE NEW_DOWN_SEQ
START WITH 0
MINVALUE 0;
-- 설문문항
CREATE SEQUENCE SURVEY_Q_SEQ
START WITH 0
MINVALUE 0;
-- 설문답
CREATE SEQUENCE SURVEY_R_SEQ
START WITH 1
MINVALUE 0;
--새터 에디터 댓글번호
CREATE SEQUENCE NEW_REPLY_EDIT_SEQ
START WITH 1
MINVALUE 0;

---------GRADE---------------
---------GRADE---------------
CREATE TABLE GRADE( -- 등급
    GRADE_NO NUMBER,    --등급 번호 | 기본키
    GRADE_NAME NVARCHAR2(10),   --등급 이름
    CONSTRAINT GRADE PRIMARY KEY(GRADE_NO)
) ;

---------FAQ------------
CREATE TABLE FAQ(
    FAQ_NO NUMBER,  --FAQ 번호 ( 기본키 )
    FAQ_TITLE NVARCHAR2(1500),  --FAQ 제목
    FAQ_CONTENT NVARCHAR2(2000),    --FAQ 내용
    FAQ_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT FAQ PRIMARY KEY(FAQ_NO)
);
---------NOTICE----------
CREATE TABLE NOTICE(
    NOTICE_NO NUMBER, --NOTICE번호 ( 기본키 )
    NOTICE_TITLE NVARCHAR2(1500),  --NOTICE 제목
    NOTICE_CONTENT NVARCHAR2(2000), --NOTICE 내용
    NOTICE_FILE NVARCHAR2(100),     --NOTICE 파일명
    NOTICE_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT NOTICE PRIMARY KEY(NOTICE_NO)
);

---------MEM------------
CREATE TABLE MEM( --멤버
    MEM_NO NUMBER,              -- 회원번호 ( 기본키 )
    GRADE_NO NUMBER,            --등급번호 ( 외래키 : GRADE )
    MEM_EMAIL NVARCHAR2(50) UNIQUE,    -- 이메일
    MEM_PW NVARCHAR2(50),       -- 비번
    MEM_NICK NVARCHAR2(50) UNIQUE,     -- 닉네임
    MEM_NAME NVARCHAR2(50),     -- 이름
    MEM_TEL NVARCHAR2(15),             -- 전화번호
    MEM_EXP NUMBER,             -- 명성
    MEM_RPT_CNT NUMBER,          -- 신고 누적 횟수
    MEM_SURVEY NUMBER,          --설문 참여 상태
    MEM_BOOK_STATE NUMBER,      --스크랩 신청 상태
    MEM_DATE DATE DEFAULT SYSDATE,  --회원가입날짜
    MEM_BLACK_DATE DATE DEFAULT SYSDATE, --회원 블랙 날짜
    CONSTRAINT MEM PRIMARY KEY(MEM_NO),
    CONSTRAINT GRADE_MEM FOREIGN KEY(GRADE_NO) REFERENCES GRADE(GRADE_NO) ON DELETE CASCADE
);

CREATE TABLE BIZ( --사업자회원
    BIZ_NO NVARCHAR2(50),      --사업자등록번호 ( 기본키 )
    BIZ_PW NVARCHAR2(50),
    BIZ_TRADEMARK NVARCHAR2(50),    --상호명
    BIZ_NAME NVARCHAR2(10),         --대표자이름
    BIZ_TEL NUMBER,                 --대표자 전화번호
    BIZ_EMAIL NVARCHAR2(50),        --대표자 이메일
    BIZ_ADDRESS NVARCHAR2(100),     --회사주소,
    BIZ_DETAIL_ADDRESS NVARCHAR2(100),   --회사상세주소
    BIZ_STATE NUMBER DEFAULT 0,     --어드민 승인상태
    BIZ_DATE DATE DEFAULT SYSDATE, -- 신청날짜
    CONSTRAINT BIZ PRIMARY KEY(BIZ_NO)
);
CREATE TABLE CONTEST(
    CONTEST_NO NUMBER,          -- 공모전글번호 ( 기본키 )
    BIZ_NO NVARCHAR2(50),              -- 사업자번호 ( 외래키 : BIZ )
    CONTEST_TITLE NVARCHAR2(100),       --공모전글제목
    CONTEST_HOSTING NVARCHAR2(100),      -- 공모전 주최
    CONTEST_PERIOD NVARCHAR2(100),                -- 공모전 접수기간
    CONTEST_TARGET NVARCHAR2(100),      -- 공모전 참가대상
    CONTEST_APPLICATION NVARCHAR2(100), -- 응모 분야
    CONTEST_SCALE NVARCHAR2(100),       -- 시상 규모
    CONTEST_FIRSTMONEY NVARCHAR2(100),  -- 1등 시상금
    CONTEST_TEL NVARCHAR2(20),          -- 문의
    CONTEST_EMAIL NVARCHAR2(30),        -- 이메일
    CONTEST_HOMEPAGE NVARCHAR2(30),     -- 홈페이지
    CONTEST_CONTENT NVARCHAR2(2000),    --공모전글내용
    CONTEST_IMG NVARCHAR2(100),         --공모전사진
    CONSTRAINT CONTEST PRIMARY KEY(CONTEST_NO),
    CONSTRAINT BIZ_CONTEST FOREIGN KEY(BIZ_NO) REFERENCES BIZ(BIZ_NO) ON DELETE CASCADE
    );


--------------EDIT---------------
CREATE TABLE EDIT( --에디터 게시물
    EDIT_NO NUMBER,         -- 에디터글번호 ( 기본키 )
    MEM_NO NUMBER,           -- 회원번호 ( 외래키 : MEM )
    EDIT_TITLE NVARCHAR2(100),      -- 에디터글제목
    EDIT_CONTENT NVARCHAR2(2000),   -- 에디터글내용
    EDIT_IMG NVARCHAR2(100),         -- 에디터사진
    EDIT_VIEW NUMBER(10),    -- 에디터 조회수
    EDIT_DATE DATE DEFAULT SYSDATE, -- 에디터 작성일
    CONSTRAINT EDIT PRIMARY KEY ( EDIT_NO ),
    CONSTRAINT MEM_EDIT FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO) ON DELETE CASCADE
);

CREATE TABLE EDIT_REPLY( --에디터 댓글
    EDIT_REPLY_NO NUMBER,   --에디터댓글번호 ( 기본키 )
    EDIT_NO NUMBER,         --에디터글번호 ( 외래키 : EDIT )
    MEM_NO NUMBER,          -- 회원번호
    EDIT_REPLY_CONTENT NVARCHAR2(1500),     --에디터댓글내용
    CONSTRAINT EDIT_REPLY PRIMARY KEY(EDIT_REPLY_NO),
    CONSTRAINT EDIT_EDIT_REPLY FOREIGN KEY (EDIT_NO)REFERENCES EDIT(EDIT_NO) ON DELETE CASCADE,
    CONSTRAINT EDIT_MEM FOREIGN KEY (MEM_NO)REFERENCES MEM(MEM_NO) ON DELETE CASCADE
);

---------CA-----------
--카테고리
CREATE TABLE CA(
    CA_NO NUMBER,            --카테고리 번호 ( 기본키 )
    CA_NAME NVARCHAR2(50),  --카테고리 이름
    CONSTRAINT CA PRIMARY KEY(CA_NO)
);
--소분류 통합
CREATE TABLE SUB_CA(
    SUB_CA_NO NUMBER,   -- 소분류 번호 ( 기본키 )
    CA_NO NUMBER,       -- 카테고리 번호 ( 외래키: CA )
    SUB_CA_NAME NVARCHAR2(50), -- 소분류 이름
    CONSTRAINT SUB_CA PRIMARY KEY(SUB_CA_NO),
    CONSTRAINT CA_SUB_CA FOREIGN KEY(CA_NO) REFERENCES CA(CA_NO) ON DELETE CASCADE
);
--책 분류
CREATE TABLE BOOK_CA(
    BOOK_CA_NO NUMBER,  -- 책 분류 번호 ( 기본키 )
    SUB_CA_NO NUMBER, --소분류 카테고리 ( 외래키 )
    BOOK_CA_NAME NVARCHAR2(200),
    CONSTRAINT BOOK_CA PRIMARY KEY(BOOK_CA_NO),
    CONSTRAINT SUB_CA_BOOK_CA FOREIGN KEY(SUB_CA_NO) REFERENCES SUB_CA(SUB_CA_NO) ON DELETE CASCADE
);


--------RPT---------
--신고내용
CREATE TABLE RPT(
    RPT_NO NUMBER,      -- 신고 타입 번호 ( 기본키 )
    RPT_CONTENT NVARCHAR2(50), -- 신고 내용
    CONSTRAINT RPT PRIMARY KEY (RPT_NO)
);
--새터 신고내용
CREATE TABLE NEW_RPT(
    NEW_RPT_NO NUMBER,              -- 새터 신고 타입 번호 ( 기본키 )
    NEW_RPT_CONTENT NVARCHAR2(50),  -- 새터 신고 내용
    CONSTRAINT NEW_RPT PRIMARY KEY ( NEW_RPT_NO)
);

--------------Q------------------
--게시물
CREATE TABLE Q(
    Q_NO NUMBER,        -- 글 번호 ( 기본키 )
    MEM_NO NUMBER,      -- 회원번호 ( 외래키 : MEM )
    SUB_CA_NO NUMBER,   -- 소분류 번호 ( 외래키 : SUB_CA )
    BOOK_CA_NO NUMBER,  -- 책분류 번호 ( 외래키 : BOOK_CA )
    Q_TITLE NVARCHAR2(100),     --글제목
    Q_CONTENT NVARCHAR2(2000),  --글내용
    Q_FILE NVARCHAR2(100),      --파일 업로드
    Q_SOS NUMBER,               --긴급상태
    Q_EXP NUMBER,               --현상금exp
    Q_UP NUMBER,                --추천수
    Q_RPT_CNT NUMBER,           --신고수
    Q_DATE DATE DEFAULT SYSDATE,--작성일
    Q_ADMIN_STATE NUMBER,       --관리자승인상태(책가는거)
    CONSTRAINT Q PRIMARY KEY(Q_NO),
    CONSTRAINT MEM_Q FOREIGN KEY(MEM_NO) REFERENCES MEM(MEM_NO) ON DELETE CASCADE,
    CONSTRAINT SUB_CA_Q FOREIGN KEY (SUB_CA_NO) REFERENCES SUB_CA(SUB_CA_NO)ON DELETE CASCADE,
    CONSTRAINT BOOK_CA_Q FOREIGN KEY (BOOK_CA_NO) REFERENCES BOOK_CA(BOOK_CA_NO)ON DELETE CASCADE
);
--게시물신고
CREATE TABLE DOWN(
    DOWN_NO NUMBER,     -- 신고번호 ( 기본키 )
    Q_NO NUMBER,        -- 글 번호 ( 외래키 : Q )
    RPT_NO NUMBER,      -- 신고타입번호 ( 외래키 : RPT )
    MEM_NO NUMBER,      -- 회원번호 ( 외래키 : MEM )
    CONSTRAINT DOWN PRIMARY KEY ( DOWN_NO ),
    CONSTRAINT Q_DOWN FOREIGN KEY (Q_NO) REFERENCES Q(Q_NO)ON DELETE CASCADE,
    CONSTRAINT RPT_DOWN FOREIGN KEY (RPT_NO) REFERENCES RPT(RPT_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_DOWN FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);
--게시물추천
CREATE TABLE UP(
    UP_NO NUMBER,       -- 추천번호 ( 기본키 )
    Q_NO NUMBER,        -- 글 번호 ( 외래키 : Q )
    MEM_NO NUMBER,      -- 회원 번호 ( 외래키 : MEM )
    CONSTRAINT UP PRIMARY KEY ( UP_NO),
    CONSTRAINT Q_UP FOREIGN KEY ( Q_NO) REFERENCES Q(Q_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_UP FOREIGN KEY ( MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);

--------REPLY------------
--댓글
CREATE TABLE REPLY(
    REPLY_NO NUMBER,        -- 댓글 번호 ( 기본키 )
    MEM_NO NUMBER,          -- 회원번호 ( 외래키 : MEM )
    Q_NO NUMBER,            -- 글 번호 ( 외래키 : Q )
    REPLY_CONTENT NVARCHAR2(1500),  -- 댓글 내용
    REPLY_UP NUMBER,                -- 댓글 추천수
    REPLY_PICK NUMBER,              -- 댓글 채택 상태
    REPLY_RPT_CNT NUMBER,           -- 댓글 신고수
    REPLY_DATE DATE DEFAULT SYSDATE,    -- 댓글 작성일
    CONSTRAINT REPLY PRIMARY KEY (REPLY_NO),
    CONSTRAINT MEM_REPLY FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE,
    CONSTRAINT Q_REPLY FOREIGN KEY (Q_NO) REFERENCES Q(Q_NO)ON DELETE CASCADE
);
--에디터 수정 댓글
CREATE TABLE REPLY_EDIT(
    REPLY_EDIT_NO NUMBER,   -- 에디터 댓글 번호 ( 기본키 )
    MEM_NO NUMBER,          -- 회원번호 ( 외래키 : MEM )
    Q_NO NUMBER,            -- 글번호 ( 외래키 : Q )
    REPLY_EDIT_CONTENT NVARCHAR2(1500),     -- 에디터 댓글 내용
    REPLY_EDIT_DATE DATE DEFAULT SYSDATE,    -- 에디터 댓글 작성일
    CONSTRAINT REPLY_EDIT PRIMARY KEY (REPLY_EDIT_NO),
    CONSTRAINT MEM_REPLY_EDIT FOREIGN KEY (MEM_NO)REFERENCES MEM(MEM_NO)ON DELETE CASCADE,
    CONSTRAINT Q_REPLY_EDIT FOREIGN KEY (Q_NO) REFERENCES Q(Q_NO)ON DELETE CASCADE
);
--댓글 추천
CREATE TABLE REPLY_UP(
    REPLY_UP_NO NUMBER,     -- 댓글 추천 번호 ( 기본키 )
    REPLY_NO NUMBER,        -- 댓글 번호 ( 외래키 : REPLY )
    MEM_NO  NUMBER,         -- 회원 번호 ( 외래키 : MEM )
    CONSTRAINT REPLY_UP PRIMARY KEY ( REPLY_UP_NO),
    CONSTRAINT REPLY_REPLY_UP FOREIGN KEY (REPLY_NO) REFERENCES REPLY(REPLY_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_REPLY_UP FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);
--댓글 신고
CREATE TABLE REPLY_DOWN(
    REPLY_DOWN_NO NUMBER,   -- 댓글 신고 번호 ( 기본키 )
    REPLY_NO NUMBER,        -- 댓글 번호 ( 외래키 : REPLY )
    RPT_NO NUMBER,          -- 신고 타입 번호 ( 외래키 : RPT )
    MEM_NO NUMBER,          -- 회원 번호 ( 외래키 : MEM )
    CONSTRAINT REPLY_DOWN PRIMARY KEY ( REPLY_DOWN_NO),
    CONSTRAINT REPLY_REPLY_DOWN FOREIGN KEY (REPLY_NO) REFERENCES REPLY(REPLY_NO)ON DELETE CASCADE,
    CONSTRAINT RPT_REPLY_NO FOREIGN KEY (RPT_NO) REFERENCES RPT(RPT_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_REPLY_NO FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);


--------SCRAP------------
--책스크랩
CREATE TABLE BOOK_SCRAP(
    BOOK_SCRAP_NO NUMBER,   -- 책 번호 ( 기본키 )
    Q_NO NUMBER,            -- 글 번호 ( 외래키 : Q )
    BOOK_SCRAP_CNT NUMBER,  -- 책스크랩신청카운트
    CONSTRAINT BOOK_SCRAP PRIMARY KEY ( BOOK_SCRAP_NO ),
    CONSTRAINT Q_BOOK_SCRAP FOREIGN KEY (Q_NO) REFERENCES Q(Q_NO)ON DELETE CASCADE
);
--책스크랩신청누른정보
CREATE TABLE BOOK_SCRAP_UP(
    BOOK_SCRAP_UP_NO NUMBER, -- 책스크랩신청번호 ( 기본키 )
    Q_NO NUMBER,    -- 책 번호 ( 외래키 : BOOK_SCRAP )
    MEM_NO NUMBER,           -- 회원 번호(신청한) 외래키 : MEM
    CONSTRAINT BOOK_SCRAP_UP PRIMARY KEY (BOOK_SCRAP_UP_NO),
    CONSTRAINT Q_BOOK_SCRAP_UP FOREIGN KEY (Q_NO) REFERENCES Q(Q_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_BOOK_SCRAP_UP FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);
--마이스크랩
CREATE TABLE MY_SCRAP(
    MY_SCRAP_NO NUMBER,     -- 마이스크랩번호
    Q_NO NUMBER,            -- 글 번호 ( 외래키 : Q )
    MEM_NO NUMBER,          -- 회원 번호 ( 외래키 : MEM )
    MY_SCRAP_MEMO NVARCHAR2(200),   -- 마이스크랩 메모
    MY_SCRAP_DATE DATE DEFAULT SYSDATE, -- 마이스크랩 작성일
    CONSTRAINT MY_SCRAP PRIMARY KEY (MY_SCRAP_NO),
    CONSTRAINT Q_MY_SCRAP FOREIGN KEY (Q_NO) REFERENCES Q(Q_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_MY_SCRAP FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);



----------NEW----------
--새터
CREATE TABLE NEW(
    NEW_NO NUMBER,      -- 새터 글 번호 ( 기본키 )
    MEM_NO NUMBER,      -- 회원 번호 ( 외래키 : MEM )
    CA_NO NUMBER,       -- 카테고리 번호 ( 외래키 : CA )
    NEW_TITLE NVARCHAR2(100),       -- 새터 제목
    NEW_CONTENT NVARCHAR2(1000),    -- 새터 내용
    NEW_UP  NUMBER,                 -- 새터 추천수
    NEW_RPT_CNT NUMBER,             -- 새터 신고수
    NEW_DATE DATE DEFAULT SYSDATE,  -- 새터 작성일
    NEW_PICK_STATE NUMBER DEFAULT 0,    --새터 채택 상태 ( 기본 0 채택 1 )
    NEW_FILE NVARCHAR2(100),        --새터 파일명
    CONSTRAINT NEW PRIMARY KEY (NEW_NO),
    CONSTRAINT MEM_NEW FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE,
    CONSTRAINT CA_NEW FOREIGN KEY (CA_NO) REFERENCES CA(CA_NO)ON DELETE CASCADE
);

-- 새터 에디트
CREATE TABLE NEW_REPLY_EDIT(
    NEW_REPLY_EDIT_NO NUMBER,   --새터에디터댓글번호 ( 기본키 )
    MEM_NO NUMBER,      --회원번호 ( 외래키 )
    NEW_NO NUMBER,      --새터번호 ( 외래키 )
    NEW_REPLY_EDIT_CONTENT NVARCHAR2(1000), --내용
    NEW_REPLY_EDIT_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT NEW_REPLY_EDIT PRIMARY KEY (NEW_REPLY_EDIT_NO),
    CONSTRAINT MEM_NEW_REPLY_EDIT FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE,
    CONSTRAINT NEW_NEW_REPLY_EDIT FOREIGN KEY (NEW_NO) REFERENCES NEW(NEW_NO)ON DELETE CASCADE
);


--새터 추천
CREATE TABLE NEW_UP(
    NEW_UP_NO NUMBER,       -- 새터 추천 번호 ( 기본키 )
    NEW_NO NUMBER,          -- 새터 글 번호 ( 외래키 : NEW )
    MEM_NO NUMBER,          -- 회원 번호 ( 외래키 : MEM )
    CONSTRAINT NEW_UP PRIMARY KEY (NEW_UP_NO),
    CONSTRAINT NEW_NEW_UP FOREIGN KEY(NEW_NO) REFERENCES NEW( NEW_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_NEW_UP FOREIGN KEY(MEM_NO) REFERENCES MEM( MEM_NO)ON DELETE CASCADE
);
-- 새터 신고
CREATE TABLE NEW_DOWN(
    NEW_DOWN_NO NUMBER,     -- 새터 신고 번호 ( 기본키 )
    NEW_NO NUMBER,          -- 새터 글 번호 ( 외래키 : NEW )
    NEW_RPT_NO NUMBER,      -- 새터 신고타입 번호 ( 외래키 : NEW_RPT )
    MEM_NO NUMBER,          -- 회원 번호 ( 외래키 : MEM )
    CONSTRAINT NEW_DOWN PRIMARY KEY ( NEW_DOWN_NO ),
    CONSTRAINT NEW_NEW_DOWN FOREIGN KEY(NEW_NO) REFERENCES NEW(NEW_NO)ON DELETE CASCADE,
    CONSTRAINT NEW_RPT_NEW_DOWN FOREIGN KEY(NEW_RPT_NO) REFERENCES NEW_RPT(NEW_RPT_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_NEW_DOWN FOREIGN KEY(MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);

---------NEW_REPLY----------
--새터 댓글
CREATE TABLE NEW_REPLY(
    NEW_REPLY_NO NUMBER,        -- 새터 댓글 번호 ( 기본키 )
    NEW_NO NUMBER,              -- 새터 글 번호 ( 외래키 : NEW )
    MEM_NO NUMBER,              -- 회원 번호 ( 외래키 : MEM )
    NEW_REPLY_CONTENT NVARCHAR2(1500),  -- 새터 댓글 내용
    NEW_REPLY_UP NUMBER,                -- 새터 댓글 추천수
    NEW_REPLY_PICK NUMBER,              -- 새터 댓글 채택 상태
    NEW_REPLY_RPT_CNT NUMBER,           -- 새터 댓글 신고 수
    NEW_REPLY_DATE DATE DEFAULT SYSDATE,    -- 새터 댓글 작성일
    CONSTRAINT NEW_REPLY PRIMARY KEY (NEW_REPLY_NO),
    CONSTRAINT NEW_NEW_REPLY FOREIGN KEY (NEW_NO) REFERENCES NEW(NEW_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_NEW_REPLY FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);
--새터 댓글 추천
CREATE TABLE NEW_REPLY_UP(
    NEW_REPLY_UP_NO NUMBER,     -- 새터댓글추천번호 ( 기본키 )
    NEW_REPLY_NO NUMBER,        -- 새터 댓글 번호 ( 외래키 : NEW_REPLY )
    MEM_NO NUMBER,              -- 회원 번호 ( 외래키 : MEM )
    CONSTRAINT NEW_REPLY_UP PRIMARY KEY (NEW_REPLY_UP_NO),
    CONSTRAINT NEW_REPLY_NEW_REPLY_UP FOREIGN KEY (NEW_REPLY_NO) REFERENCES NEW_REPLY(NEW_REPLY_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_NEW_REPLY_UP FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);
--새터 댓글 신고
CREATE TABLE NEW_REPLY_DOWN(
    NEW_REPLY_DOWN_NO NUMBER,   -- 새터 댓글 신고 번호 ( 기본키 )
    NEW_RPT_NO NUMBER,          -- 새터 신고 타입 번호 ( 외래키 : NEW_RPT )
    NEW_REPLY_NO NUMBER,        -- 새터 댓글 번호 ( 외래키 : NEW_REPLY )
    MEM_NO NUMBER,              -- 회원 번호 ( 외래키 : MEM )
    CONSTRAINT NEW_REPLY_DOWN PRIMARY KEY (NEW_REPLY_DOWN_NO),
    CONSTRAINT NEW_RPT_NEW_REPLY_DOWN FOREIGN KEY ( NEW_RPT_NO) REFERENCES NEW_RPT(NEW_RPT_NO)ON DELETE CASCADE,
    CONSTRAINT NEW_REPLY_NEW_REPLY_DOWN FOREIGN KEY ( NEW_REPLY_NO) REFERENCES NEW_REPLY(NEW_REPLY_NO)ON DELETE CASCADE,
    CONSTRAINT MEM_NEW_REPLY_DOWN FOREIGN KEY (MEM_NO) REFERENCES MEM(MEM_NO)ON DELETE CASCADE
);
-- 설문문항
CREATE TABLE SURVEY_Q(
    SURVEY_Q_NO NUMBER, --설문번호  (기본키)
    SURVEY_Q_CONTENT NVARCHAR2(50), --문항내용
    CONSTRAINT SURVEY_Q PRIMARY KEY (SURVEY_Q_NO)
);

-- 설문 답변
CREATE TABLE SURVEY_R(
    SURVEY_R_NO NUMBER, --답번호 ( 기본키 )
    SURVEY_Q_NO NUMBER, -- 문항번호 ( 외래키 )
    SURVEY_R_CONTENT NVARCHAR2(50), --답내용
    SURVEY_R_CNT NUMBER,    --답카운트
    CONSTRAINT SURVEY_R PRIMARY KEY(SURVEY_R_NO),
    CONSTRAINT SURVEY_Q_SURVEY_R FOREIGN KEY (SURVEY_Q_NO) REFERENCES SURVEY_Q(SURVEY_Q_NO) ON DELETE CASCADE
);


---------INSERT---------------
--GRADE
INSERT INTO GRADE VALUES(1,'브론즈');
INSERT INTO GRADE VALUES(2,'실버');
INSERT INTO GRADE VALUES(3,'골드');
INSERT INTO GRADE VALUES(4,'플레티넘');
INSERT INTO GRADE VALUES(5,'다이아몬드');

--CA
INSERT INTO CA VALUES(1,'언어');
INSERT INTO CA VALUES(2,'프레임워크');
INSERT INTO CA VALUES(3,'데이터베이스');
INSERT INTO CA VALUES(4,'검색팁');

--SUB_CA
INSERT INTO SUB_CA VALUES(1,1,'JAVA');
INSERT INTO SUB_CA VALUES(2,1,'PYTHON');
INSERT INTO SUB_CA VALUES(3,1,'C#');

--INSERT INTO SUB_CA VALUES(4,2,'SPRING');
INSERT INTO SUB_CA VALUES(4,2,'REACT');
INSERT INTO SUB_CA VALUES(5,2,'VUE');

INSERT INTO SUB_CA VALUES(7,3,'ORACLE');
INSERT INTO SUB_CA VALUES(8,3,'MYSQL');
--INSERT INTO SUB_CA VALUES(9,3,'NOSQL');

----------BOOK_CA----
INSERT INTO BOOK_CA VALUES(1,1,'자바 환경 설정');
INSERT INTO BOOK_CA VALUES(2,1,'제어문');
INSERT INTO BOOK_CA VALUES(3,1,'메소드');
INSERT INTO BOOK_CA VALUES(4,1,'클래스');
INSERT INTO BOOK_CA VALUES(5,1,'컬렉션 프레임워크');

INSERT INTO BOOK_CA VALUES(6,2,'파이썬 환경 설정');
INSERT INTO BOOK_CA VALUES(7,2,'튜플 & 리스트 & 딕셔너리 자료형');
INSERT INTO BOOK_CA VALUES(8,2,'제어문');
INSERT INTO BOOK_CA VALUES(9,2,'함수');
INSERT INTO BOOK_CA VALUES(10,2,'클래스');
--C
INSERT INTO BOOK_CA VALUES(11,3,'c# 환경 설정');
INSERT INTO BOOK_CA VALUES(12,3,'제어문');
INSERT INTO BOOK_CA VALUES(13,3,'메소드');
INSERT INTO BOOK_CA VALUES(14,3,'클래스');
INSERT INTO BOOK_CA VALUES(15,3,'스레드 & 태스크');

--FRAMEWORK
--SPRING
--INSERT INTO BOOK_CA VALUES(16,4,'스프링의개념');
--INSERT INTO BOOK_CA VALUES(17,4,'데이터의흐름');
--INSERT INTO BOOK_CA VALUES(18,4,'모델');
--INSERT INTO BOOK_CA VALUES(19,4,'객체주입');
--INSERT INTO BOOK_CA VALUES(20,4,'MAPPER');

--REACT
INSERT INTO BOOK_CA VALUES(21,4,'리액트의 특징');
INSERT INTO BOOK_CA VALUES(22,4,'작업 환경 설정');
INSERT INTO BOOK_CA VALUES(23,4,'JSX');
INSERT INTO BOOK_CA VALUES(24,4,'컴포넌트');
INSERT INTO BOOK_CA VALUES(25,4,'Hooks');
--VUE
INSERT INTO BOOK_CA VALUES(26,5,'뷰의 특징');
INSERT INTO BOOK_CA VALUES(27,5,'작업 환경 설정');
INSERT INTO BOOK_CA VALUES(28,5,'인스턴스 & 컴포넌트');
INSERT INTO BOOK_CA VALUES(29,5,'라우터 & HTTP 통신');
INSERT INTO BOOK_CA VALUES(30,5,'템플릿 구성');

--DATABASE
--ORACLE
INSERT INTO BOOK_CA VALUES(31,7,'작업 환경 구성');
INSERT INTO BOOK_CA VALUES(32,7,'DML');
INSERT INTO BOOK_CA VALUES(33,7,'DDL');
INSERT INTO BOOK_CA VALUES(34,7,'DCL');
INSERT INTO BOOK_CA VALUES(35,7,'PL/SQL');
--MYSQL
INSERT INTO BOOK_CA VALUES(36,8,'작업 환경 구성');
INSERT INTO BOOK_CA VALUES(37,8,'아키텍처');
INSERT INTO BOOK_CA VALUES(38,8,'트랜잭션');
INSERT INTO BOOK_CA VALUES(39,8,'쿼리 작성');
INSERT INTO BOOK_CA VALUES(40,8,'인덱스');
--NOSQL
--INSERT INTO BOOK_CA VALUES(41,9,'데이터베이스');
--INSERT INTO BOOK_CA VALUES(42,9,'MOSQL의특징');
--INSERT INTO BOOK_CA VALUES(43,9,'MOSQL의장점');
--INSERT INTO BOOK_CA VALUES(44,9,'데이터조회');
--INSERT INTO BOOK_CA VALUES(45,9,'데이터삭제');


-----------RPT--------
--RPT
INSERT INTO RPT VALUES(1,'주제에 맞지 않음');
INSERT INTO RPT VALUES(2,'욕설');
INSERT INTO RPT VALUES(3,'광고');
INSERT INTO RPT VALUES(4,'사칭');

--NEW_RPT
INSERT INTO NEW_RPT VALUES(1,'욕설');
INSERT INTO NEW_RPT VALUES(2,'광고');
INSERT INTO NEW_RPT VALUES(3,'사칭');

-- 회원 더미
INSERT INTO MEM VALUES(-1,5,'admin@naver.com','1234','admin','admin',1,50000,0, 0,0,sysdate,sysdate);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 4, 'grade4@naver.com', '1234', '4등급 계정', '명호', '01022294356', 550, 0, 0,0, SYSDATE, SYSDATE);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 1, 'grade1@naver.com', '1234', '1등급 계정', '명자', '01012341234', 0, 0, 0,0, SYSDATE, SYSDATE);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 1, 'report@naver.com', '1234', '리폿당한 계정', '리폿이름', '01055554444', 0, 9, 0,0, SYSDATE, SYSDATE);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 1, 'reply@naver.com', '1234', '댓글용 계정', '하이', '01012341235', 0, 0, 0,0, SYSDATE, SYSDATE);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 1, 'report2@naver.com' ,'1234', '욕쟁이', 'xxx' , '01012343212', 0, 13 ,0,0,SYSDATE,SYSDATE);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 1, 'report3@naver.com' ,'1234', '광고쟁이', 'xxx' , '01012788412', 0, 18 ,0,0,SYSDATE,SYSDATE);
--제제당한애들
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 2, 'report4@naver.com' ,'1234', '길동', '푸딩', '01012355234', 0, 18 ,0,0,SYSDATE,SYSDATE+3);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 3, 'report5@naver.com' ,'1234', '둘리', '딸기',  '01012346564', 0, 18 ,0,0,SYSDATE,SYSDATE+3);
INSERT INTO MEM VALUES(MEM_SEQ.NEXTVAL, 2, 'report6@naver.com' ,'1234', '짱구', '산낙지', '01022224444', 0, 18 ,0,0,SYSDATE,SYSDATE+3);

-- 게시글 더미
INSERT INTO Q VALUES(1, 2, 1, 1, '자바의 최대 장점이 무엇인가요?', '궁금합니다', '이미지명', 0, 0, 0, 0, '20170311', 0 );
INSERT INTO Q VALUES(2, 3, 1, 2, '알고리즘좀 대신 풀어주세요', '이 글은 신고가 9개입니다', '이미지명', 0, 0, 0, 9, SYSDATE, 0);
INSERT INTO Q VALUES(3, 1, 1, 3, '이너클래스는 왜쓰나요 ?', '왜 굳이 클래스안에 클래스를 사용하나요?', '이미지', 1, 30, 0, 0, SYSDATE, 0);
INSERT INTO Q VALUES(4, 1, 1, 4, '인터페이스는 왜쓰나요?', '어떤 이유때문에 유지보수가 좋아지나요?', '이미지', 0, 0, 9, 0, SYSDATE, 0);
INSERT INTO Q VALUES(5, 2, 1, 5, 'Swing 사용중 에러가 발생...', 'Swing', '이미지명', 0, 0, 0, 0, SYSDATE, 0);
INSERT INTO Q VALUES(6, 1, 1, 2, 'for문과 while문의 차이점이 궁금합니다', '각각의 장단점이 궁금합니다', '이미지명', 0, 0, 0, 0, SYSDATE, 0);
INSERT INTO Q VALUES(30, 2, 1, 1, '자바 jdk 설치도중 에러가 발생...?', '궁금합니다', '이미지명', 0, 0, 0, 0, '20170311', 0 );
INSERT INTO Q VALUES(31, 1, 1, 1, '자바 혼자 독학하려는데 몇 버전을 사용하는것이..', '궁금합니다', '이미지명', 0, 0, 0, 0, '20170311', 0 );
INSERT INTO Q VALUES(32, 3, 1, 1, '자바언어를 학습하면 어느 분야에 취업하기 좋나요?', '궁금합니다', '이미지명', 0, 0, 0, 0, '20170311', 0 );
INSERT INTO Q VALUES(33, 4, 1, 1, 'jdk와 jre는 어떤 역할을 하나요?', '궁금합니다', '이미지명', 0, 0, 0, 0, '20170311', 0 );
--C#
INSERT INTO Q VALUES(7, 1 ,3,12,'배열의 인덱스가 범위를 벗어났습니다 라는 에러발생 ','배열 사용중 에러가 발생했습니다 도와주세요',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(8, 1 ,3,15,'스레드가 종료되었습니다.','언어 버전 NET Framework 4.8로 작성되었습니다.
환경 : 비주얼 스튜디오
버튼을 누르면  Task 1개를 실행합니다.
제가 아는 Task는...
프로세스 당 단 1개의 ThreadPool이 생성되며, Task를 호출하게되면 ThreadPool에서 Thread를 할당받아 사용한 뒤 작업이 끝나면 ThreadPool에 반환되어,
다음 Task 작업 시 재사용한다고 알고 있습니다.
예제프로그램에서 버튼을 눌러 Task를 실행한 뒤, 작업이 끝나면
Visual Studio의 출력창에 조금 뒤..."스레드가 종료되었습니다" 문구가 여러 번 발생됩니다.
이 출력문구가 출력되는 횟수가 버튼을 누를때마다 다릅니다.
"스레드가 종료되었습니다"문구는 실제로 디버깅 중인 프로세스의 Thread가 종료되면 나오는 문구인가요?',NULL,0,0,0,0,SYSDATE,0);

INSERT INTO Q VALUES(9, 1 ,3,14,'클래스를 나누어 놓는 이유가 무엇인가요 ??','.',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(10, 1 ,3,11,'C# 환경 구축 중 에러가 발생했습니다.','질문글을 작성할 때  가이드라인을 지켜주세요.
                        *필수 작성
                        1. 사용하는 언어 버전 : C# 7.2
                        2. 사용하는 IDE : 비주얼 스튜디오',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(11, 1 ,3,12,'switch 사용중 에러가 발생했는데 원인을 모르겠습니다','질문글을 작성할 때  가이드라인을 지켜주세요.
                        *필수 작성
                        1. 사용하는 언어 버전 : 7.2
                        2. 사용하는 IDE : 비주얼 스튜디오',NULL,0,0,0,0,SYSDATE,0);

--PYTHON
SELECT * FROM Q;
SELECT * FROM BOOK_CA;
INSERT INTO Q VALUES(12,2,2,6,'PYTHON 어느 버전을 가장 많이 사용하나요??','가장 안정적이고 실무에서 많이 쓰는 버전이 무엇일까요?',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(13,2,2,7,'튜플과 리스트의 차이가 뭔가요?','어느상황에 주로 쓰이나요??',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(14,2,2,8,'FOR문 사용중 에러가 발생하였습니다.','질문글을 작성할 때  가이드라인을 지켜주세요.
                        *필수 작성
                        1. 사용하는 언어 버전 : 3.5.X
                        2. 사용하는 IDE : 주피터 노트북

for i in range(1,10)
    print(i)',NULL,0,0,0,0,SYSDATE,0);
UPDATE Q SET Q_EXP = 20 WHERE Q_NO=13;
UPDATE Q SET Q_SOS = 1 WHERE Q_NO=13;

INSERT INTO Q VALUES(15,2,2,6,'파이썬이 대세인 이유','갑자기 많이 쓰이게 된 이유가 뭔가요?',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(16,2,2,10,'클래스랑 함수랑 가장 큰 차이점이 뭔가요 ?','둘다 똑같이 사용하면 안되나요 ?',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(17,2,2,9,'함수 선언부에서 에러가 발생..','질문글을 작성할 때  가이드라인을 지켜주세요.
                        *필수 작성
                        1. 사용하는 언어 버전 : 3.5.X
                        2. 사용하는 IDE : 주피터 노트북

def temp:
a = 1
b = 2
return a',NULL,0,0,0,0,SYSDATE,0);
INSERT INTO Q VALUES(18,2,2,6,'가장 많이 사용되는 에디터가 무엇인가요?','질문글을 작성할 때  가이드라인을 지켜주세요.
                        *필수 작성
                        1. 사용하는 언어 버전 : 3.5
                        2. 사용하는 IDE : X
추천 부탁드립니다.',NULL,0,0,0,0,SYSDATE,0);

-- 제재 당하기전 게시글들 더미
INSERT INTO Q VALUES(19,2,1,3,'!@$#!@#','.',NULL,0,0,0,10,SYSDATE,0);
INSERT INTO Q VALUES(20,2,2,6,'과제좀 대신 해주세요','.',NULL,0,0,0,17,SYSDATE,0);
INSERT INTO Q VALUES(21,1,1,1,'프로그래밍 공부는 어떻게 시작할까요?','.',NULL,0,0,0,14,SYSDATE,0);


-- 댓글 더미
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 1, 1, '융합성이 좋습니다', 10, 0, 0, SYSDATE); -- 일반
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 4, 1, '간결하면서도 강력한 객체 지향 언어입니다', 5, 0, 0, SYSDATE);   -- 일반
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 2, 2, '신고를 누르겟습니다.', 3, 0, 0, SYSDATE); -- 현상금
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 4, 3, '내부클래스에서 외부클래스의 멤버에 손쉽게 접근할 수 있습니다', 0, 0, 0, SYSDATE); -- 현상금
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 2, 4, '클래스간 결합도를 낮출 수 있습니다.', 0, 1, 0, SYSDATE); --채택 완료
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 1, 5, '그럴땐 이렇게 하면 됩니다.', 0, 1, 0, SYSDATE); -- 채택 완료
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 1, 5, '안타깝네요', 0, -1, 0, SYSDATE); -- 채택 완료

INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 2,8,'스레드가 종료되었습니다 문구는 실제로 스레드 종료를 알리는 것이 맞습니다. 1개의 스레드를 사용자가 생성했다고는 하지만 ThreadPool 제작자 입장에서는 그 1개의 생성을 미래의 또 다른 요청을 생각해 몇 개의 스레드를 더 만들 수도 있을 것입니다. 다음의 글도 함께 읽어보시다면 도움이 되실 것입니다.
ThreadPool.QueueUserWorkItem 의 실행 지연
 http://www.sysnet.pe.kr/2/0/1455

.NET 응용 프로그램에 기본 생성되는 스레드들에 대한 탐구
 http://www.sysnet.pe.kr/2/0/1247',0,0,0,SYSDATE);
UPDATE REPLY SET REPLY_PICK = 1 WHERE REPLY_CONTENT LIKE '%종료%';

INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 2, 15, '간결하고, 방대한 양의 라이브러리가 가장큰 장점입니다.', 0, 0, 0, SYSDATE);
UPDATE REPLY SET REPLY_PICK = 1 WHERE REPLY_CONTENT LIKE '%방대한%';
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, 1, 12, '3.X 버전을 많이 사용합니다.',3,1,0,SYSDATE);


-- 설문 더미
INSERT INTO SURVEY_Q VALUES (1,'성별을 선택해주세요');
INSERT INTO SURVEY_Q VALUES (2,'연령대를 선택해주세요');
INSERT INTO SURVEY_Q VALUES (3,'주로 사용하는 프로그래밍 언어는 무엇입니까?');
INSERT INTO SURVEY_Q VALUES (4,'가장 배우고 싶은 프로그래밍 언어는 무엇입니까?');
INSERT INTO SURVEY_Q VALUES (5,'주로 사용하는 데이터베이스는 무엇입니까?');
INSERT INTO SURVEY_Q VALUES (6,'가장 배우고 싶은 데이터베이스는 무엇입니까?');
INSERT INTO SURVEY_Q VALUES (7,'주로 사용하는 프레임워크는 무엇입니까?');
INSERT INTO SURVEY_Q VALUES (8,'가장 배우고 싶은 데이터베이스는 무엇입니까?');
--설문 답 더미
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,1,'남자',30);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,1,'여자',45);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,2,'10대',15);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,2,'20대',75);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,2,'30대',100);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,2,'40대',39);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,2,'50대이상',16);

INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'JAVA',41);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'PYTHON',76);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'C',56);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'C#',45);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'C++',67);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'KOTLIN',30);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'HTML',16);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'CSS',22);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,3,'JAVASCRIPT',13);

INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'JAVA',16);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'PYTHON',35);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'C',22);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'C#',34);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'C++',54);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'KOTLIN',67);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'HTML',12);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'CSS',13);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,4,'JAVASCRIPT',12);

INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,5,'Oracle',26);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,5,'MySQL',35);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,5,'NoSQL',4);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,5,'MongoDB',12);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,5,'PostgreSQL',9);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,5,'Redis',7);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,5,'MariaDB',18);

INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,6,'Oracle',26);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,6,'MySQL',12);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,6,'NoSQL',25);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,6,'MongoDB',22);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,6,'PostgreSQL',7);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,6,'Redis',10);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,6,'MariaDB',19);

INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,7,'Spring',49);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,7,'Django',24);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,7,'Node.js',44);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,7,'React',35);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,7,'Angular',29);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,7,'NETCore',18);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,7,'Tensorflow',23);

INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,8,'Spring',21);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,8,'Django',42);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,8,'Node.js',55);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,8,'React',39);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,8,'Angular',24);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,8,'NETCore',12);
INSERT INTO SURVEY_R VALUES(SURVEY_R_SEQ.NEXTVAL,8,'Tensorflow',12);


-- new 더미
INSERT INTO NEW VALUES(NEW_SEQ.NEXTVAL,1,4,'NEWTEST1','NEW',6,0,SYSDATE,0);
INSERT INTO NEW VALUES(NEW_SEQ.NEXTVAL,1,4,'NEWTEST2','NEW',3,0,SYSDATE,0);
INSERT INTO NEW VALUES(NEW_SEQ.NEXTVAL,1,4,'NEWTEST3','NEW',3,0,SYSDATE,0);
INSERT INTO NEW VALUES(NEW_SEQ.NEXTVAL,1,4,'NEWTEST4','NEW',1,0,SYSDATE,0);
INSERT INTO NEW VALUES(NEW_SEQ.NEXTVAL,1,4,'NEWTEST5','NEW',0,0,SYSDATE,0);
INSERT INTO NEW VALUES(NEW_SEQ.NEXTVAL,1,4,'NEWTEST6','NEW',0,0,SYSDATE,0);
-- NEW_REPLY 더미
INSERT INTO NEW_REPLY VALUES(NEW_REPLY_SEQ.NEXTVAL,1,1,'NEWREPLY',0,1,0,SYSDATE);
INSERT INTO NEW_REPLY VALUES(NEW_REPLY_SEQ.NEXTVAL,1,1,'NEWREPLY',0,-1,0,SYSDATE);
INSERT INTO NEW_REPLY VALUES(NEW_REPLY_SEQ.NEXTVAL,2,1,'NEWREPLY',0,1,0,SYSDATE);
INSERT INTO NEW_REPLY VALUES(NEW_REPLY_SEQ.NEXTVAL,3,1,'NEWREPLY',0,0,0,SYSDATE);
INSERT INTO NEW_REPLY VALUES(NEW_REPLY_SEQ.NEXTVAL,4,1,'NEWREPLY',0,1,0,SYSDATE);
INSERT INTO NEW_REPLY VALUES(NEW_REPLY_SEQ.NEXTVAL,2,1,'NEWREPLY',0,-1,0,SYSDATE);
INSERT INTO NEW_REPLY VALUES(NEW_REPLY_SEQ.NEXTVAL,5,1,'NEWREPLY',0,0,0,SYSDATE);

--공모전 및 기업회원 더미
INSERT INTO BIZ VALUES('1234','1234','SL','김남성','01066728882','biz1@naver.com','가산동 남성프라자','1007호',1,sysdate);
INSERT INTO BIZ VALUES('122134','1234','MJ','김명자','01049828882','biz2@naver.com','부산동 여성프라자','107호',0,sysdate);
INSERT INTO BIZ VALUES('142134','1234','SH','명김자','01066468282','biz3@naver.com','용산동 이성프라자','1107호',0,sysdate);
INSERT INTO BIZ VALUES('1297','1234','JH','최명자','01066721372','biz4@naver.com','철산동 삼성프라자','1307호',0,sysdate);
INSERT INTO BIZ VALUES('81234','1234','JY','김최명','01067822872','biz5@naver.com','남산동 양성프라자','1507호',0,sysdate);
INSERT INTO BIZ VALUES('16234','1234','WS','명호자','01066574982','biz6@naver.com','경산동 육성프라자','1707호',0,sysdate);
INSERT INTO CONTEST VALUES(1,'1234','MZ인공지능 해커톤 대회','SL아카데미','2020.12.01 ~ 2020.12.30','SL아카데미 수강생','IT/웹/모바일','5백만원 ~ 1천만원','500만원','010-1544-1544','biz1@naver.com','itjy2.tistroy.com','MZ 인공지능 해커톤 대회

■ 공모 및 접수 : 12.01(월) ~ 12. 30(수)

■ 참가접수 : 홈페이지를 활용한 참가신청
- 팀 신청, 학생/일반인 혼합팀 참가 가능
0- 접수는 지정된 접수일 시(12월 20일 일요일 23시 59분) 내에 신청','공모전1.png');
INSERT INTO CONTEST VALUES(2,'122134','시뮬레이션 경진대회','MJ컴퍼니','2020.12.01 ~ 2020.12.30','제한없음','IT/웹/모바일','5백만원 ~ 1천만원','500만원','010-1544-1544','biz2@naver.com','itjy2.tistroy.com','MZ 인공지능 해커톤 대회

■ 공모 및 접수 : 12.01(월) ~ 12. 30(수)

■ 참가접수 : 홈페이지를 활용한 참가신청
- 팀 신청, 학생/일반인 혼합팀 참가 가능
- 접수는 지정된 접수일 시(12월 20일 일요일 23시 59분) 내에 신청','공모전2.jpg');
INSERT INTO CONTEST VALUES(3,'142134','MZ인공지능 해커톤 대회','SH그룹','2020.12.01 ~ 2020.12.30','대학생/졸업예정자','IT/웹/모바일','5백만원 ~ 1천만원','500만원','010-1544-1544','biz1@naver.com','itjy2.tistroy.com','MZ 인공지능 해커톤 대회

■ 공모 및 접수 : 12.01(월) ~ 12. 30(수)

■ 참가접수 : 홈페이지를 활용한 참가신청
- 팀 신청, 학생/일반인 혼합팀 참가 가능
- 접수는 지정된 접수일 시(12월 20일 일요일 23시 59분) 내에 신청','공모전3.jpg');
INSERT INTO CONTEST VALUES(4,'1297','AI양재 허브','JY농업','2020.12.01 ~ 2020.12.30','제한없음','IT/웹/모바일','5백만원 ~ 1천만원','500만원','010-1544-1544','biz1@naver.com','itjy2.tistroy.com','MZ 인공지능 해커톤 대회

■ 공모 및 접수 : 12.01(월) ~ 12. 30(수)

■ 참가접수 : 홈페이지를 활용한 참가신청
- 팀 신청, 학생/일반인 혼합팀 참가 가능
- 접수는 지정된 접수일 시(12월 20일 일요일 23시 59분) 내에 신청','공모전4.jpg');
INSERT INTO CONTEST VALUES(5,'16234','해양 침적 쓰레기 이미지 데이터 해커톤','WS배추','2020.12.01 ~ 2020.12.30','제한없음','IT/웹/모바일','5백만원 ~ 1천만원','500만원','010-1544-1544','biz1@naver.com','itjy2.tistroy.com','MZ 인공지능 해커톤 대회

■ 공모 및 접수 : 12.01(월) ~ 12. 30(수)

■ 참가접수 : 홈페이지를 활용한 참가신청
- 팀 신청, 학생/일반인 혼합팀 참가 가능
- 접수는 지정된 접수일 시(12월 20일 일요일 23시 59분) 내에 신청','공모전5.jpg');
INSERT INTO CONTEST VALUES(6, '1234','작물 질병 해충 AI 공개데이터 기반 인공지능 해커톤','SL아카데미','2020.12.01 ~ 2020.12.30','제한없음','IT/웹/모바일','5백만원 ~ 1천만원','500만원','010-1544-1544','biz1@naver.com','itjy2.tistroy.com','MZ 인공지능 해커톤 대회

■ 공모 및 접수 : 12.01(월) ~ 12. 30(수)

■ 참가접수 : 홈페이지를 활용한 참가신청
- 팀 신청, 학생/일반인 혼합팀 참가 가능
- 접수는 지정된 접수일 시(12월 20일 일요일 23시 59분) 내에 신청','공모전6.jpg');

-- FAQ 더미
INSERT INTO FAQ VALUES(FAQ_SEQ.NEXTVAL,1,1,SYSDATE);

--첫번째 커밋
COMMIT;


-- 트리거
DROP TRIGGER ADMIN_STATE_0_TO_1;
DROP TRIGGER ADMIN_STATE_1_TO_2;
DROP TRIGGER ADMIN_STATE_2_TO_3;
DROP TRIGGER GRADE_1_TRG;
DROP TRIGGER GRADE_1_TO_2_TRG;
DROP TRIGGER GRADE_2_TO_3_TRG;
DROP TRIGGER GRADE_3_TO_4_TRG;
DROP TRIGGER GRADE_4_TO_5_TRG;
DROP TRIGGER GRADE_5_TO_6_TRG;
----트리거---
--게시글 추천이 10이 될때 ADMIN_STATE값을 1로 변경하는 트리거
CREATE OR REPLACE TRIGGER ADMIN_STATE_0_TO_1_TRG
BEFORE UPDATE ON Q  --Q 테이블에 업데이트가 발생하면
FOR EACH ROW        --몰름
WHEN (NEW.Q_UP=100 AND NEW.Q_ADMIN_STATE<1)  --조건식 ( Q_UP의 값이 10일때, ADMIN_STATE값이 1보다 작을 때 )
BEGIN                       --명령 실행부
:NEW.Q_ADMIN_STATE:=1;      --Q.ADMIN_STATE값이 1로 변경
END;
/

--게시글 신청이 최초로 발생했을때 1에서 2로 변경하는 트리거
CREATE OR REPLACE TRIGGER ADMIN_STATE_1_TO_2_TRG
AFTER INSERT ON BOOK_SCRAP  -- BOOK_SCRAP 테이블에 삽입이 발생하면 ( 최초 신청이면 )
FOR EACH ROW
BEGIN
    UPDATE Q SET Q_ADMIN_STATE=2
    WHERE Q_NO=:NEW.Q_NO;
END;
/


--게시글 스크랩북 신청이 10이 될때 ADMIN_STATE값을 3로 변경하는 트리거
CREATE OR REPLACE TRIGGER ADMIN_STATE_2_TO_3_TRG
BEFORE UPDATE ON BOOK_SCRAP  --BOOK_SCRAP 테이블에 업데이트가 발생하면
FOR EACH ROW        --몰름
WHEN (NEW.BOOK_SCRAP_CNT=50)  --조건식 ( BOOK_SCRAP_CNT=10일때 )
BEGIN                       --명령 실행부
    UPDATE Q SET Q_ADMIN_STATE=3
    WHERE Q_NO=:NEW.Q_NO; --Q_ADMIN_STATE는 3이된다 ( Q_NO = BOOK_SCRAP테이블의 CNT가 10이된 Q_NO에 )
END;
/



CREATE OR REPLACE TRIGGER GRADE_1_TRG
BEFORE UPDATE ON MEM
FOR EACH ROW
WHEN (NEW.MEM_EXP<15)
BEGIN
:NEW.GRADE_NO:=1;
END;
/

CREATE OR REPLACE TRIGGER GRADE_1_TO_2_TRG
BEFORE UPDATE ON MEM
FOR EACH ROW
WHEN (NEW.MEM_EXP>=15 AND NEW.MEM_EXP<50)
BEGIN
:NEW.GRADE_NO:=2;
END;
/
CREATE OR REPLACE TRIGGER GRADE_2_TO_3_TRG
BEFORE UPDATE ON MEM
FOR EACH ROW
WHEN (NEW.MEM_EXP>=50 AND NEW.MEM_EXP<125)
BEGIN
:NEW.GRADE_NO:=3;
END;
/
CREATE OR REPLACE TRIGGER GRADE_3_TO_4_TRG
BEFORE UPDATE ON MEM
FOR EACH ROW
WHEN (NEW.MEM_EXP>=125 AND NEW.MEM_EXP<500)
BEGIN
:NEW.GRADE_NO:=4;
END;
/
CREATE OR REPLACE TRIGGER GRADE_4_TO_5_TRG
BEFORE UPDATE ON MEM
FOR EACH ROW
WHEN (NEW.MEM_EXP>=500 AND NEW.MEM_EXP<1000)
BEGIN
:NEW.GRADE_NO:=5;
END;
/
CREATE OR REPLACE TRIGGER GRADE_5_TO_6_TRG
BEFORE UPDATE ON MEM
FOR EACH ROW
WHEN (NEW.MEM_EXP>=1000)
BEGIN
:NEW.GRADE_NO:=6;
END;
/




--게시글 트리거를 이용해 승인페이지까지 가는놈 ( 트리거 먼저 다시 컴파일 해줘야함 )
INSERT INTO Q VALUES(9999,1,1,1, '곧 승인페이지에 갈 글입니다.','.',NULL,0,0,0,0,SYSDATE,0);
UPDATE Q SET Q_UP = 10 WHERE Q_NO=9999;
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,9999,0);
UPDATE BOOK_SCRAP SET BOOK_SCRAP_CNT=10 WHERE Q_NO=9999;

UPDATE Q SET Q_UP = 100 WHERE Q_NO=1;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=4;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=8;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=6;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=12;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=15;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=30;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=31;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=32;
UPDATE Q SET Q_UP = 100 WHERE Q_NO=33;

INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,1,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,4,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,8,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,6,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,12,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,15,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,30,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,31,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,32,0);
INSERT INTO BOOK_SCRAP VALUES(BOOK_SCRAP_SEQ.NEXTVAL,33,0);

UPDATE BOOK_SCRAP SET BOOK_SCRAP_CNT =50 WHERE Q_NO < 9999;
-- 두번째 커밋
COMMIT;
